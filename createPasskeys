import crypto from 'crypto';
import cbor from 'cbor';
import base64url from 'base64url';
import fs from 'fs/promises';
import fetch from 'node-fetch';

async function signWebAuthn(publicKeyCredentialCreationOptionsJson) {
  const publicKeyCredentialCreationOptions = JSON.parse(publicKeyCredentialCreationOptionsJson);
  const { challenge, rp } = publicKeyCredentialCreationOptions.publicKey;

  const keyPair = crypto.generateKeyPairSync('ec', {
    namedCurve: 'prime256v1',
    publicKeyEncoding: { type: 'spki', format: 'der' },
    privateKeyEncoding: { type: 'pkcs8', format: 'pem' },
  });

  const origin = rp.id === "localhost"
    ? "http://localhost:3000"
    : `https://${rp.id}`;

  const clientDataJSON = Buffer.from(JSON.stringify({
    type: 'webauthn.create',
    challenge: challenge,
    origin: origin,
    crossOrigin: false,
  }));

  const rpIdHash = crypto.createHash('sha256').update(rp.id).digest();
  const flagsBuf = Buffer.from([0x41]);
  const signCountBuf = Buffer.alloc(4);
  const aaguid = Buffer.alloc(16);
  const credId = crypto.randomBytes(16);
  const credIdLenBuf = Buffer.alloc(2);
  credIdLenBuf.writeUInt16BE(credId.length, 0);

  const publicKeyCoords = extractPublicKeyCoords(keyPair.publicKey);
  const cosePublicKey = new Map([
    [1, 2],
    [3, -7],
    [-1, 1],
    [-2, publicKeyCoords.x],
    [-3, publicKeyCoords.y],
  ]);

  const credentialPublicKey = cbor.encodeCanonical(cosePublicKey);

  const authenticatorData = Buffer.concat([
    rpIdHash,
    flagsBuf,
    signCountBuf,
    aaguid,
    credIdLenBuf,
    credId,
    credentialPublicKey,
  ]);

  const attestationObject = cbor.encodeCanonical({
    fmt: 'none',
    attStmt: {},
    authData: authenticatorData,
  });

  const credential = {
    id: base64url(credId),
    rawId: base64url(credId),
    response: {
      clientDataJSON: base64url(clientDataJSON),
      attestationObject: base64url(attestationObject),
    },
    type: 'public-key',
    clientExtensionResults: {},
    authenticatorAttachment: 'platform',
  };

  return JSON.stringify(credential);
}

function extractPublicKeyCoords(spkiDer) {
  let offset = spkiDer.length - 65;
  while (offset >= 0) {
    if (spkiDer[offset] === 0x04 && offset + 65 <= spkiDer.length) {
      const coords = spkiDer.slice(offset + 1, offset + 65);
      return {
        x: coords.slice(0, 32),
        y: coords.slice(32),
      };
    }
    offset--;
  }
  throw new Error('Failed to extract public key coordinates');
}

async function main() {
  const endpointGet = 'https://example.com/get-endpoint'; // Update this URL
  const endpointPost = 'https://example.com/post-endpoint'; // Update this URL
  const authorizationToken = 'Bearer your-token-here'; // Update your token

  const responseGet = await fetch(endpointGet, {
    method: 'GET',
    headers: { 'Authorization': authorizationToken },
  });

  if (responseGet.status !== 200) {
    throw new Error(`GET request failed with status: ${responseGet.status}`);
  }

  const dataToSign = await responseGet.json();

  const signedData = await signWebAuthn(JSON.stringify(dataToSign));

  const responsePost = await fetch(endpointPost, {
    method: 'POST',
    headers: {
      'Authorization': authorizationToken,
      'Content-Type': 'application/json',
    },
    body: signedData,
  });

  if (responsePost.status !== 201) {
    throw new Error(`POST request failed with status: ${responsePost.status}`);
  }

  console.log('Successfully signed and posted data.');
}

main().catch(console.error);
